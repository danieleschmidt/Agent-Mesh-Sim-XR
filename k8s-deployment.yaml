apiVersion: v1
kind: Namespace
metadata:
  name: agent-mesh-xr
  labels:
    app: agent-mesh-xr
    tier: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-mesh-xr-config
  namespace: agent-mesh-xr
data:
  NODE_ENV: "production"
  MAX_AGENTS: "10000"
  NETWORK_ENDPOINT: "wss://api.agent-mesh.com/ws"
  LOG_LEVEL: "info"
  SECURITY_ENABLED: "true"
  PERFORMANCE_MONITORING: "true"
  GPU_ACCELERATION: "true"
  REDIS_URL: "redis://redis-service:6379"
  POSTGRES_URL: "postgresql://postgres-service:5432/agentmesh"
---
apiVersion: v1
kind: Secret
metadata:
  name: agent-mesh-xr-secrets
  namespace: agent-mesh-xr
type: Opaque
data:
  # Base64 encoded secrets
  JWT_SECRET: "c3VwZXItc2VjcmV0LWp3dC1rZXktZm9yLWFnZW50LW1lc2g="
  DB_PASSWORD: "ZGItcGFzc3dvcmQtaGVyZQ=="
  REDIS_PASSWORD: "cmVkaXMtcGFzc3dvcmQtaGVyZQ=="
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-mesh-xr
  namespace: agent-mesh-xr
  labels:
    app: agent-mesh-xr
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: agent-mesh-xr
  template:
    metadata:
      labels:
        app: agent-mesh-xr
        version: v1.0.0
    spec:
      containers:
      - name: agent-mesh-xr
        image: registry.company.com/agent-mesh-xr:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 8080
          name: websocket
          protocol: TCP
        env:
        - name: PORT
          value: "3000"
        - name: WS_PORT
          value: "8080"
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: agent-mesh-xr-config
              key: NODE_ENV
        - name: MAX_AGENTS
          valueFrom:
            configMapKeyRef:
              name: agent-mesh-xr-config
              key: MAX_AGENTS
        - name: NETWORK_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: agent-mesh-xr-config
              key: NETWORK_ENDPOINT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: agent-mesh-xr-config
              key: LOG_LEVEL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: agent-mesh-xr-secrets
              key: JWT_SECRET
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agent-mesh-xr-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: agent-mesh-xr-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      securityContext:
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: agent-mesh-xr-service
  namespace: agent-mesh-xr
  labels:
    app: agent-mesh-xr
spec:
  selector:
    app: agent-mesh-xr
  ports:
  - name: http
    port: 80
    targetPort: 3000
    protocol: TCP
  - name: websocket
    port: 8080
    targetPort: 8080
    protocol: TCP
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: agent-mesh-xr-ingress
  namespace: agent-mesh-xr
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-upgrade: "true"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$client_ip"
    nginx.ingress.kubernetes.io/websocket-services: "agent-mesh-xr-service"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - agent-mesh-xr.company.com
    secretName: agent-mesh-xr-tls
  rules:
  - host: agent-mesh-xr.company.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: agent-mesh-xr-service
            port:
              number: 80
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: agent-mesh-xr-service
            port:
              number: 8080
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: agent-mesh-xr-pdb
  namespace: agent-mesh-xr
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: agent-mesh-xr
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agent-mesh-xr-hpa
  namespace: agent-mesh-xr
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: agent-mesh-xr
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30