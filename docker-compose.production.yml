version: '3.8'

services:
  agent-mesh-xr:
    build:
      context: .
      dockerfile: deployment/production/Dockerfile
      args:
        NODE_ENV: production
    image: agent-mesh-xr:production
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - WS_PORT=8080
      - MAX_AGENTS=10000
      - NETWORK_ENDPOINT=wss://api.agent-mesh.com/ws
      - LOG_LEVEL=info
      - SECURITY_ENABLED=true
      - PERFORMANCE_MONITORING=true
      - GPU_ACCELERATION=true
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:5432/agentmesh
      - JWT_SECRET=${JWT_SECRET}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - /tmp:/tmp:rw
      - cache_volume:/app/cache
    networks:
      - agent-mesh-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 5

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/production/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/production/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - agent-mesh-network
    depends_on:
      - agent-mesh-xr
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - agent-mesh-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agentmesh
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/production/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - agent-mesh-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d agentmesh"]
      interval: 30s
      timeout: 10s
      retries: 3

  monitoring:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/production/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - agent-mesh-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/production/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/production/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - agent-mesh-network
    depends_on:
      - monitoring

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - agent-mesh-network

volumes:
  cache_volume:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  agent-mesh-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16