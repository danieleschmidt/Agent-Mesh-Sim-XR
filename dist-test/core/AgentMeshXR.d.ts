import { EventEmitter } from 'eventemitter3';
import type { AgentMeshXRConfig, XRSessionConfig, Agent, TimeControlConfig } from '../types';
export declare class AgentMeshXR extends EventEmitter {
    private xrManager;
    private connector;
    private swarmVisualizer;
    private timeController?;
    private performanceMonitor;
    private securityManager;
    private gpuAccelerator;
    private config;
    private agents;
    private isRunning;
    private sessionId;
    private healthCheckInterval?;
    private lastHealthCheck;
    private consecutiveFailures;
    private maxConsecutiveFailures;
    private circuitBreakerOpen;
    constructor(config: AgentMeshXRConfig);
    connect(endpoint: string): Promise<void>;
    startXR(config: XRSessionConfig): Promise<void>;
    stopXR(): Promise<void>;
    enableTimeControl(config: TimeControlConfig): void;
    addAgent(agent: Agent): void;
    updateAgent(agentData: Partial<Agent> & {
        id: string;
    }): void;
    removeAgent(agentId: string): void;
    getAgent(agentId: string): Agent | undefined;
    getAllAgents(): Agent[];
    getActiveAgentCount(): number;
    private setupEventListeners;
    private startRenderLoop;
    private rewindToTimestamp;
    private setupErrorRecovery;
    private generateSessionId;
    private startHealthCheck;
    private performHealthCheck;
    private evaluateSystemHealth;
    private attemptRecovery;
    private processBatchedAgentUpdates;
    private getAdaptiveCapacity;
    getPerformanceReport(): unknown;
    getSecurityReport(): unknown;
    getScene(): unknown;
    getSessionId(): string;
    getGPUAcceleratorStats(): unknown;
    getSystemInfo(): unknown;
    dispose(): void;
}
